{"version":3,"sources":["../search.js"],"names":[],"mappings":"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","file":"search.js","sourcesContent":["function isObject(obj) {\n  //return Object.prototype.toString.call(obj) === \"[object Object]\" || Object.prototype.toString.call(obj) === \"[object Array]\";\n  return typeof(obj) === 'object' && obj !== null && obj !== undefined;\n}\n\n/**\n * @class ScopeSearch\n * class to search in javascript objects\n */\nclass ScopeSearch {\n  /**\n   * constructor of the ScopeSearch class.\n   * @constructor\n   * @param {Object} [origin={}] object to search through\n   * @param  {function} [validator= function(){return false}] condition that will validate whether or not the data looked at is a valid result\n   * @param  {Object} [options = {maxDepth:50, key:true, value: true, logErrors: false, logProgress:true, progressThreshold:0.25}] object specifying different options to our search\n   * @param {Number} [options.maxDepth=50] maximum depth the recursive search will go through.\n   * @param {Boolean} [options.key=true] check the keys of properties for matches against our validator\n   * @param {Boolean} [options.value=true] check the values of properties for matches against our validator\n   * @param {Boolean} [options.logErrors=false] log (console.error) error thrown by our validator function\n   * @param {Boolean} [options.logProgress=true] log progress percentage of our search (compared to total amount of properties to look at)\n   * @param {Number} [options.progressThreshold=0.25] threshold % to show for the progress logs (default logs for every 25% searched)\n   * @return {ScopeSearch}         instance created (this)\n   */\n  constructor(origin = {}, validator = function() {\n    return false;\n  }, options = {}) {\n    this.options = Object.assign({ maxDepth: 50, key: true, value: true, logErrors: false, logProgress: true, progressThreshold: 0.25 }, options);\n    this.validator = validator;\n    this.origin = origin;\n    this.results = [];\n    this.timeouts = [];\n    return this;\n  }\n  /**\n   * use console.log to log the passed parameter\n   * @param  {String} toLog message to print w/ console.error\n   */\n  logError(toLog) {\n    if (this.options.logErrors) {\n      console.error(toLog);\n    }\n  }\n  __loopThrough(originObj, callback, depth = 0, context = '') {\n    const currentDepth = depth + 1;\n    this._visited.add(originObj);\n    for (let key in originObj) {\n      try {\n        if (!callback(originObj, key, originObj[key], currentDepth, context) || (originObj.hasOwnProperty && !originObj.hasOwnProperty(key))) {\n          continue;\n        }\n\n        if (isObject(originObj[key]) && !this._visited.has(originObj[key])) {\n          this.__loopThrough(originObj[key], callback, currentDepth, `${context}['${key}']`);\n        }\n      } catch (e) {\n        this.logError(e);\n      }\n    }\n  }\n  _recursiveBrowsing(originObj, callback) {\n    this._visited = new WeakSet();\n    this.__loopThrough(originObj, callback);\n    this._visited = null;\n  }\n  /**\n   * check the specific data against the validator function\n   * @param  {String|Number|Function} data      value to call validator with\n   * @param  {Function} [validator=this.validator] validator to test the passed data with\n   * @return {Boolean}            whether or not the tested data matched the requireements of the validator\n   */\n  testValue(data, validator = this.validator) {\n    let res = false;\n    try {\n      res = validator(data);\n    } catch (e) {\n      this.logError(`${context}=>${e}`);\n    } finally {\n      return res;\n    }\n  }\n  /**\n   * search through given object for data that matches the validator\n   * @param  {Object} [origin=this.origin]    object to search through\n   * @param  {Function} [validator=this.validator]  condition that will validate whether or not the data looked at is a valid result (see {@link ScopeSearch#constructor})\n   * @param  {Object} [otions=this.options] object specifying different options to our search (see {@link ScopeSearch#constructor})\n   * @return {Array.Objects}           Array containing all matching results\n   */\n  search(origin = this.origin, validator = this.validator, options = {}) {\n    Object.assign(this.options, options);\n    this.results = [];\n    let counter = 0;\n    const nbObjs = this.options.logProgress && this.count(origin);\n    if (nbObjs) {\n      var nextThreshold = 0.25;\n      console.info(`Searching through ${nbObjs} ${(this.options.key ? \"keys and \" : \"\")}${(this.options.value? \"values\" : \"\")}`);\n    }\n    this._recursiveBrowsing(origin, (container, key, value, depth, context) => {\n      counter++;\n      if (this.options.logProgress && counter / nbObjs >= nextThreshold) {\n        console.log(`${((counter / nbObjs) * 100) | 0}% searched...`);\n        nextThreshold += this.options.progressThreshold;\n      }\n      if (this.options.key && this.testValue(key, validator)) {\n        this.results.push({ data: key, context, container, key: true });\n      }\n      if (this.options.value && this.testValue(value, validator)) {\n        this.results.push({ data: value, context: `${context}['${key}']`, container, value: true });\n      }\n      return depth < this.options.maxDepth;\n    });\n    return this.results;\n  }\n  /**\n   * Counts the number of non-object properties inside of a javascript object\n   * @param  {Object} [origin=this.origin]    object which will be searched through and the number of properties returned\n   * @return {Number}        Number of (non-object) properties which inside the origin and all its inner objects\n   */\n  count(origin=this.origin) {\n    let res = 0;\n    this._recursiveBrowsing(origin, (container, key, value, depth, context) => {\n      res++;\n      return depth < this.options.maxDepth;\n    });\n    return res;\n  }\n}\n\n\ntry {\n  module.exports = ScopeSearch;\n} catch (e) {\n  console.log('cannot export module');\n}\n"]}